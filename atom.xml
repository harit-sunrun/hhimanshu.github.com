<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Stack Dump]]></title>
  <link href="http://hhimanshu.github.com/atom.xml" rel="self"/>
  <link href="http://hhimanshu.github.com/"/>
  <updated>2012-08-03T14:26:43-07:00</updated>
  <id>http://hhimanshu.github.com/</id>
  <author>
    <name><![CDATA[Harit Himanshu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Finding TopKRecords using hadoop]]></title>
    <link href="http://hhimanshu.github.com/blog/2012/08/03/finding-topkrecods-using-hadoop/"/>
    <updated>2012-08-03T13:33:00-07:00</updated>
    <id>http://hhimanshu.github.com/blog/2012/08/03/finding-topkrecods-using-hadoop</id>
    <content type="html"><![CDATA[<p>This is my first attempt to write a Map Reduce program myself :)</p>

<p>The input data - <a href="http://data.nber.org/patents/apat63_99.zip">apat63_99.zip</a></p>

<p>The idea I had is following:</p>

<pre><code>- read each record
- get the relevant column
- group the elements by common key, so that one reducer will get all the data
- get the unique elements in the list received by reducer and sort it
- return only the number of values requested as K parameter on command line
</code></pre>

<p>The entire source code is</p>

<figure class='code'><figcaption><span>Finding Top K Records </span><a href='https://github.com/hhimanshu/hadoop-programs/blob/master/hadoop-programs/src/main/java/com/hadoop/programs/TopKRecord.java'>source code </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">hadoop</span><span class="o">.</span><span class="na">programs</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.conf.Configuration</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.conf.Configured</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.Path</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.LongWritable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.Text</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.Job</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.Mapper</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.Reducer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.input.FileInputFormat</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.output.FileOutputFormat</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.util.Tool</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.util.ToolRunner</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.TreeSet</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * User: hhimanshu</span>
</span><span class='line'><span class="cm"> * Date: 8/1/12</span>
</span><span class='line'><span class="cm"> * Time: 5:42 AM</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @author Harit Himanshu&lt;/a&gt;</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TopKRecord</span> <span class="kd">extends</span> <span class="n">Configured</span> <span class="kd">implements</span> <span class="n">Tool</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">MapClass</span> <span class="kd">extends</span> <span class="n">Mapper</span><span class="o">&lt;</span><span class="n">LongWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">LongWritable</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">map</span><span class="o">(</span><span class="n">LongWritable</span> <span class="n">key</span><span class="o">,</span> <span class="n">Text</span> <span class="n">value</span><span class="o">,</span> <span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// your map code goes here</span>
</span><span class='line'>            <span class="n">String</span><span class="o">[]</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Text</span> <span class="n">year</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Text</span><span class="o">(</span><span class="s">&quot;topKRecords&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">LongWritable</span> <span class="n">claims</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LongWritable</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">fields</span><span class="o">[</span><span class="mi">8</span><span class="o">].</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">(!</span><span class="n">fields</span><span class="o">[</span><span class="mi">8</span><span class="o">].</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;\&quot;&quot;</span><span class="o">)))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">claims</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">fields</span><span class="o">[</span><span class="mi">8</span><span class="o">].</span><span class="na">toString</span><span class="o">()));</span>
</span><span class='line'>                <span class="n">context</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">year</span><span class="o">,</span> <span class="n">claims</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Reduce</span> <span class="kd">extends</span> <span class="n">Reducer</span><span class="o">&lt;</span><span class="n">Text</span><span class="o">,</span> <span class="n">LongWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">Text</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">reduce</span><span class="o">(</span><span class="n">Text</span> <span class="n">key</span><span class="o">,</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">LongWritable</span><span class="o">&gt;</span> <span class="n">values</span><span class="o">,</span> <span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// your reduce function goes here</span>
</span><span class='line'>            <span class="n">TreeSet</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">uniqueSorted</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeSet</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;();</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="n">LongWritable</span> <span class="nl">value:</span> <span class="n">values</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">uniqueSorted</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">toString</span><span class="o">()));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">StringBuffer</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Iterator</span> <span class="n">reverseIterator</span> <span class="o">=</span> <span class="n">uniqueSorted</span><span class="o">.</span><span class="na">descendingIterator</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Configuration</span> <span class="n">conf</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getConfiguration</span><span class="o">();</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">maxRecords</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">conf</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;NumberOfRecords&quot;</span><span class="o">));</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">(</span><span class="n">reverseIterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="n">maxRecords</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">reverseIterator</span><span class="o">.</span><span class="na">next</span><span class="o">().</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;,&quot;</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">count</span> <span class="o">++;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="n">context</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="k">new</span> <span class="n">Text</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">()));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">run</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Configuration</span> <span class="n">conf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Configuration</span><span class="o">();</span>
</span><span class='line'>        <span class="n">conf</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;NumberOfRecords&quot;</span><span class="o">,</span> <span class="n">args</span><span class="o">[</span><span class="mi">2</span><span class="o">]);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Job</span> <span class="n">job</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Job</span><span class="o">(</span><span class="n">conf</span><span class="o">);</span>
</span><span class='line'>        <span class="n">job</span><span class="o">.</span><span class="na">setJarByClass</span><span class="o">(</span><span class="n">TopKRecord</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">job</span><span class="o">.</span><span class="na">setMapperClass</span><span class="o">(</span><span class="n">MapClass</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">job</span><span class="o">.</span><span class="na">setReducerClass</span><span class="o">(</span><span class="n">Reduce</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">FileInputFormat</span><span class="o">.</span><span class="na">setInputPaths</span><span class="o">(</span><span class="n">job</span><span class="o">,</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
</span><span class='line'>        <span class="n">FileOutputFormat</span><span class="o">.</span><span class="na">setOutputPath</span><span class="o">(</span><span class="n">job</span><span class="o">,</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">job</span><span class="o">.</span><span class="na">setMapOutputKeyClass</span><span class="o">(</span><span class="n">Text</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">job</span><span class="o">.</span><span class="na">setMapOutputValueClass</span><span class="o">(</span><span class="n">LongWritable</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">job</span><span class="o">.</span><span class="na">setJobName</span><span class="o">(</span><span class="s">&quot;TopKRecord&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//        job.setNumReduceTasks(0); // to just run Mapper</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">success</span> <span class="o">=</span> <span class="n">job</span><span class="o">.</span><span class="na">waitForCompletion</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">success</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">ToolRunner</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="k">new</span> <span class="n">TopKRecord</span><span class="o">(),</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="n">ret</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For running the program, do the following</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>
</span><span class='line'>    <span class="n">$</span> <span class="n">hadoop</span> <span class="n">jar</span> <span class="n">Hadoop</span><span class="o">-</span><span class="n">programs</span><span class="o">.</span><span class="na">jar</span> <span class="n">com</span><span class="o">/</span><span class="n">hadoop</span><span class="o">/</span><span class="n">programs</span><span class="o">/</span><span class="n">TopKRecord</span> <span class="n">in</span> <span class="n">out</span> <span class="mi">4</span>
</span><span class='line'>   <span class="n">$</span> <span class="n">cat</span> <span class="n">out</span><span class="o">/</span><span class="n">part</span><span class="o">-</span><span class="mi">00000</span>
</span><span class='line'>   <span class="n">topKRecords</span>     <span class="mi">868</span><span class="o">,</span><span class="mi">706</span><span class="o">,</span><span class="mi">642</span><span class="o">,</span><span class="mi">472</span><span class="o">,</span>
</span><span class='line'>  
</span><span class='line'>   <span class="n">$</span> <span class="n">hadoop</span> <span class="n">jar</span> <span class="n">Hadoop</span><span class="o">-</span><span class="n">programs</span><span class="o">.</span><span class="na">jar</span> <span class="n">com</span><span class="o">/</span><span class="n">hadoop</span><span class="o">/</span><span class="n">programs</span><span class="o">/</span><span class="n">TopKRecord</span> <span class="n">in</span> <span class="n">out</span> <span class="mi">10</span>
</span><span class='line'>   <span class="n">$</span> <span class="n">cat</span> <span class="n">out</span><span class="o">/</span><span class="n">part</span><span class="o">-</span><span class="mi">00000</span>
</span><span class='line'>   <span class="n">topKRecords</span>     <span class="mi">868</span><span class="o">,</span><span class="mi">706</span><span class="o">,</span><span class="mi">642</span><span class="o">,</span><span class="mi">472</span><span class="o">,</span><span class="mi">394</span><span class="o">,</span><span class="mi">393</span><span class="o">,</span><span class="mi">348</span><span class="o">,</span><span class="mi">346</span><span class="o">,</span><span class="mi">320</span><span class="o">,</span><span class="mi">313</span><span class="o">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please feel free to point out the better ways of doing it, would be happy to learn</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passing parameters to mappers and reducers in new Hadoop API]]></title>
    <link href="http://hhimanshu.github.com/blog/2012/08/03/passing-parameters-to-mappers-and-reducers-in-new-hadoop-api/"/>
    <updated>2012-08-03T13:20:00-07:00</updated>
    <id>http://hhimanshu.github.com/blog/2012/08/03/passing-parameters-to-mappers-and-reducers-in-new-hadoop-api</id>
    <content type="html"><![CDATA[<p>This came out as my part of learning where I had to pass variable on runtime to reducer to show up only the number of records I pass as parameter</p>

<p>I looked up and found that there are two ways - using old API and using new API.</p>

<p>Assuming that you are using the latest hadoop distribution, you are using new API, here is how you would do it</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="c1">// while setting up job</span>
</span><span class='line'>  <span class="n">Configuration</span> <span class="n">conf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Configuration</span><span class="o">();</span>
</span><span class='line'>  <span class="n">conf</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;NumberOfRecords&quot;</span><span class="o">,</span> <span class="n">args</span><span class="o">[</span><span class="mi">2</span><span class="o">]);</span> <span class="c1">// I chose to get param from command-line, you can override to any value</span>
</span><span class='line'>  <span class="n">Job</span> <span class="n">job</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Job</span><span class="o">(</span><span class="n">conf</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// in your mapper() or reducer()</span>
</span><span class='line'>  <span class="n">Configuration</span> <span class="n">conf</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getConfiguration</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">maxRecords</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">conf</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;NumberOfRecords&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>and this is all you need!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Template for your most Map Reduce programs]]></title>
    <link href="http://hhimanshu.github.com/blog/2012/08/02/basic-template-for-your-most-map-reduce-programs/"/>
    <updated>2012-08-02T15:38:00-07:00</updated>
    <id>http://hhimanshu.github.com/blog/2012/08/02/basic-template-for-your-most-map-reduce-programs</id>
    <content type="html"><![CDATA[<p>This is true that you would never have to write a Map Reduce program from scratch. This is what I learned while reading <a href="http://manning.com/lam/">Hadoop in Action</a></p>

<p>I thought I would be a nice thing to write a basic Map Reduce skeleton that I and almost anyone want to write Map Reduce program can leverage.</p>

<p>Here is it</p>

<div><script src='https://gist.github.com/3241462.js?file='></script>
<noscript><pre><code>import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

import java.io.IOException;

public class MapReduceClass extends Configured implements Tool {

    public static class MapClass extends Mapper&lt;LongWritable, Text, Text, LongWritable&gt; {

        public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
            // your map code goes here

        }
    }


    public static class Reduce extends Reducer&lt;Text, LongWritable, Text, Text&gt; {

        public void reduce(Text key, Iterable&lt;LongWritable&gt; values, Context context) throws IOException, InterruptedException {
            // your reduce function goes here
    }

    public int run(String args[]) throws Exception {
        Job job = new Job();
        job.setJarByClass(MapReduceClass.class);

        job.setMapperClass(MapClass.class);
        job.setReducerClass(Reduce.class);

        FileInputFormat.setInputPaths(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        // if your map output key/value classes are different than your input key/value classes
        // see - http://stackoverflow.com/questions/11761135/hadoop-job-fails-while-reducing-java-io-ioexception-type-mismatch-in-value-fro
        job.setMapOutputKeyClass(Text.class);
        job.setMapOutputValueClass(LongWritable.class);
        
        job.setJobName(&quot;MapReduceClass&quot;);

        // uncomment the following if you just want to run Mapper and not Reducer
//        job.setNumReduceTasks(0);
        boolean success = job.waitForCompletion(true);
        return success ? 0 : 1;
    }

    public static void main(String args[]) throws Exception {
        int ret = ToolRunner.run(new MapReduceClass(), args);
        System.exit(ret);
    }
}</code></pre></noscript></div>


<p>Let me know if you see any issues with that or you would like to share anything that would be useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[extracting specific fields from your mongo collection]]></title>
    <link href="http://hhimanshu.github.com/blog/2012/08/01/extracting-specific-fields-from-your-mongo-collection/"/>
    <updated>2012-08-01T10:06:00-07:00</updated>
    <id>http://hhimanshu.github.com/blog/2012/08/01/extracting-specific-fields-from-your-mongo-collection</id>
    <content type="html"><![CDATA[<p>This morning I had a requirement where in I had to get the list of all names in my collections in a file.</p>

<p>I looked over the <a href="http://www.mongodb.org">MongoDB</a> documentation and found <a href="http://www.mongodb.org/display/DOCS/mongoexport">mongoexport</a> utility that makes your life easier</p>

<p>To use it, it was pretty simple. Consider my schema as</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># database - mydatabase, collection - mycollection</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">name</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">something</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">date</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">some_date</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">value</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">some_value</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>  <span class="c"># .... and so on</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Suppose you need to take out all the &#8216;name&#8217; and &#8216;value&#8217; from collection in a file. You will do the following</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   <span class="err">$</span><span class="n">mongoexport</span> <span class="o">-</span><span class="n">d</span> <span class="n">mydatabase</span> <span class="o">-</span><span class="n">c</span> <span class="n">mycollection</span> <span class="o">-</span><span class="n">f</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span> <span class="o">--</span><span class="n">csv</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thats it!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CitationHistogram - first Hadoop program]]></title>
    <link href="http://hhimanshu.github.com/blog/2012/07/30/citationhistogram-first-hadoop-program/"/>
    <updated>2012-07-30T07:03:00-07:00</updated>
    <id>http://hhimanshu.github.com/blog/2012/07/30/citationhistogram-first-hadoop-program</id>
    <content type="html"><![CDATA[<p>This is my first post in attempt to learn Hadoop using Java.
I am using &#8220;Hadoop in Action&#8221; book to learn. The first program is about building a Citation Histogram (mentioned completely in the book)
It has two parts:</p>

<p>Part - 1 : Building the map reduce program to count the number of citations &#8220;cited&#8221;</p>

<p>Part - 2 : Building the map reduce program to count the counts and plot them</p>

<p>I have used R for plotting the graph.</p>

<div><script src='https://gist.github.com/3207166.js?file='></script>
<noscript><pre><code>package com.hadoop.patent;


/**
 * This program collect data about how many times a patent has been cited
 * input data - http://data.nber.org/patents/
 * use the citation data set cite75_99.txt and the patent description data set apat63_99.txt.
 */

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.*;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

import java.io.IOException;
import java.util.Iterator;

public class CitationHistogram extends Configured implements Tool {

    public static class MapClass extends MapReduceBase implements Mapper&lt;Text, Text, IntWritable, IntWritable&gt; {

        private final static IntWritable uno = new IntWritable(1);
        private IntWritable citationCount = new IntWritable();

        public void map(Text key, Text value, OutputCollector&lt;IntWritable, IntWritable&gt; output, Reporter reporter) throws IOException {
            citationCount.set(Integer.parseInt(value.toString()));
            output.collect(citationCount, uno);
        }
    }

    public static class Reduce extends MapReduceBase implements Reducer&lt;IntWritable, IntWritable, IntWritable, IntWritable&gt; {

        public void reduce(IntWritable key, Iterator&lt;IntWritable&gt; values, OutputCollector&lt;IntWritable, IntWritable&gt; output, Reporter reporter) throws IOException {
            int count = 0;
            while (values.hasNext()) {
                count += values.next().get();
            }

            output.collect(key, new IntWritable(count));
        }
    }

    public int run(String args[]) throws Exception {
        Configuration conf = getConf();

        JobConf job = new JobConf(conf, CitationHistogram.class);

        Path in = new Path(args[0]);
        Path out = new Path(args[1]);

        FileInputFormat.setInputPaths(job, in);
        FileOutputFormat.setOutputPath(job, out);

        job.setJobName(&quot;CitationHistogram&quot;);
        job.setMapperClass(MapClass.class);
        job.setReducerClass(Reduce.class);

        job.setInputFormat(KeyValueTextInputFormat.class);
        job.setOutputFormat(TextOutputFormat.class);

        job.setOutputKeyClass(IntWritable.class);
        job.setOutputValueClass(IntWritable.class);

//      job.set(&quot;key.value.separator.in.input.line&quot;, &quot;,&quot;);

        JobClient.runJob(job);
        return 0;
    }

    public static void main(String args[]) throws Exception {
        int res = ToolRunner.run(new Configuration(), new CitationHistogram(), args);
    }
}
</code></pre></noscript></div>


<p>For part - 1, you need to uncomment the part</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//      job.set(&quot;key.value.separator.in.input.line&quot;, &quot;,&quot;);</span>
</span></code></pre></td></tr></table></div></figure>


<p>because input dataset has &#8220;,&#8221; as input separator.</p>

<p>The output of part - 1 becomes the input for part - 2 and the input separator is tab(\t).
Our InputFormat class is</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">job</span><span class="o">.</span><span class="na">setInputFormat</span><span class="o">(</span><span class="n">KeyValueTextInputFormat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>and the default input separator is tab(\t) for this class.</p>

<p>So we see that the same program is reused twice.</p>

<p>Now the way you run this is as following:</p>

<pre><code> - Build jar for the class CitationHistogram (you can do this by using your IDE, I am using IntelliJ IDEA)

 - copy the input to hadoop file system
</code></pre>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">hadoop</span> <span class="n">dfs</span> <span class="o">-</span><span class="n">mkdir</span> <span class="n">input</span>
</span><span class='line'><span class="n">hadoop</span> <span class="n">dfs</span> <span class="o">-</span><span class="n">copyFromLocal</span> <span class="o">&lt;</span><span class="n">path_to_acite_75_99</span><span class="o">.</span><span class="na">txt</span><span class="o">&gt;</span> <span class="n">input</span><span class="o">/</span>
</span><span class='line'><span class="n">hadoop</span> <span class="n">jar</span> <span class="n">Hadoop</span><span class="o">-</span><span class="n">programs</span><span class="o">.</span><span class="na">jar</span> <span class="n">com</span><span class="o">/</span><span class="n">hadoop</span><span class="o">/</span><span class="n">patent</span><span class="o">/</span><span class="n">CitationHistogram</span> <span class="n">input</span> <span class="n">output</span>
</span><span class='line'><span class="err">#</span> <span class="nl">Note:</span> <span class="n">make</span> <span class="n">sure</span> <span class="n">output</span> <span class="n">drectory</span> <span class="n">doesn</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">exists</span> <span class="n">on</span> <span class="n">hadoop</span> <span class="n">filesystem</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once your program completes, you can run the following to get the data out from HDFS</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">hadoop</span> <span class="n">dfs</span> <span class="o">-</span><span class="n">cat</span> <span class="n">output</span><span class="o">/</span><span class="n">part</span><span class="o">-</span><span class="mi">00000</span> <span class="o">&gt;</span> <span class="o">~/</span><span class="n">Downloads</span><span class="o">/</span><span class="n">hadoop</span><span class="o">/</span><span class="n">output</span><span class="o">/</span><span class="n">CitationHistogramCount</span>
</span></code></pre></td></tr></table></div></figure>


<p>and the you can read this in R(language) to plot the graph</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err">#</span> <span class="n">CitationHistogram</span>
</span><span class='line'><span class="n">mydata</span> <span class="o">=</span> <span class="n">read</span><span class="o">.</span><span class="na">csv</span><span class="o">(</span><span class="n">file</span><span class="o">=</span><span class="s">&quot;~/Downloads/hadoop/output/CitationHistogramCount&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">mydata</span>
</span><span class='line'><span class="nf">plot</span><span class="o">(</span><span class="n">mydata</span><span class="o">,</span> <span class="n">xlab</span><span class="o">=</span><span class="s">&quot;Number of Citations&quot;</span><span class="o">,</span> <span class="n">ylab</span><span class="o">=</span><span class="s">&quot;Number of Patents&quot;</span><span class="o">,</span> <span class="n">log</span><span class="o">=</span><span class="s">&quot;y&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>and you can see the CitationHistogram following Power Law as following</p>

<p><img src="http://a.yfrog.com/img232/1231/vtd.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[first post]]></title>
    <link href="http://hhimanshu.github.com/blog/2012/07/15/first-post/"/>
    <updated>2012-07-15T17:51:00-07:00</updated>
    <id>http://hhimanshu.github.com/blog/2012/07/15/first-post</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">sayHello</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Hello World&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is my first post</p>
]]></content>
  </entry>
  
</feed>
