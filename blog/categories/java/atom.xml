<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Stack Dump]]></title>
  <link href="http://hhimanshu.github.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://hhimanshu.github.com/"/>
  <updated>2012-08-03T13:26:52-07:00</updated>
  <id>http://hhimanshu.github.com/</id>
  <author>
    <name><![CDATA[Harit Himanshu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Passing parameters to mappers and reducers in new Hadoop API]]></title>
    <link href="http://hhimanshu.github.com/blog/2012/08/03/passing-parameters-to-mappers-and-reducers-in-new-hadoop-api/"/>
    <updated>2012-08-03T13:20:00-07:00</updated>
    <id>http://hhimanshu.github.com/blog/2012/08/03/passing-parameters-to-mappers-and-reducers-in-new-hadoop-api</id>
    <content type="html"><![CDATA[<p>This came out as my part of learning where I had to pass variable on runtime to reducer to show up only the number of records I pass as parameter</p>

<p>I looked up and found that there are two ways - using old API and using new API.</p>

<p>Assuming that you are using the latest hadoop distribution, you are using new API, here is how you would do it</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// while setting up job</span>
</span><span class='line'><span class="n">Configuration</span> <span class="n">conf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Configuration</span><span class="o">();</span>
</span><span class='line'><span class="n">conf</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;NumberOfRecords&quot;</span><span class="o">,</span> <span class="n">args</span><span class="o">[</span><span class="mi">2</span><span class="o">]);</span> <span class="c1">// I chose to get param from command-line, you can override to any value</span>
</span><span class='line'><span class="n">Job</span> <span class="n">job</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Job</span><span class="o">(</span><span class="n">conf</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// in your mapper() or reducer()</span>
</span><span class='line'><span class="n">Configuration</span> <span class="n">conf</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getConfiguration</span><span class="o">();</span>
</span><span class='line'><span class="kt">int</span> <span class="n">maxRecords</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">conf</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;NumberOfRecords&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>and this is all you need!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Template for your most Map Reduce programs]]></title>
    <link href="http://hhimanshu.github.com/blog/2012/08/02/basic-template-for-your-most-map-reduce-programs/"/>
    <updated>2012-08-02T15:38:00-07:00</updated>
    <id>http://hhimanshu.github.com/blog/2012/08/02/basic-template-for-your-most-map-reduce-programs</id>
    <content type="html"><![CDATA[<p>This is true that you would never have to write a Map Reduce program from scratch. This is what I learned while reading <a href="http://manning.com/lam/">Hadoop in Action</a></p>

<p>I thought I would be a nice thing to write a basic Map Reduce skeleton that I and almost anyone want to write Map Reduce program can leverage.</p>

<p>Here is it</p>

<p><div><script src='https://gist.github.com/3241462.js?file='></script>
<noscript><pre><code>import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

import java.io.IOException;

public class MapReduceClass extends Configured implements Tool {

    public static class MapClass extends Mapper&lt;LongWritable, Text, Text, LongWritable&gt; {

        public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
            // your map code goes here

        }
    }


    public static class Reduce extends Reducer&lt;Text, LongWritable, Text, Text&gt; {

        public void reduce(Text key, Iterable&lt;LongWritable&gt; values, Context context) throws IOException, InterruptedException {
            // your reduce function goes here
    }

    public int run(String args[]) throws Exception {
        Job job = new Job();
        job.setJarByClass(MapReduceClass.class);

        job.setMapperClass(MapClass.class);
        job.setReducerClass(Reduce.class);

        FileInputFormat.setInputPaths(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        // if your map output key/value classes are different than your input key/value classes
        // see - http://stackoverflow.com/questions/11761135/hadoop-job-fails-while-reducing-java-io-ioexception-type-mismatch-in-value-fro
        job.setMapOutputKeyClass(Text.class);
        job.setMapOutputValueClass(LongWritable.class);
        
        job.setJobName(&quot;MapReduceClass&quot;);

        // uncomment the following if you just want to run Mapper and not Reducer
//        job.setNumReduceTasks(0);
        boolean success = job.waitForCompletion(true);
        return success ? 0 : 1;
    }

    public static void main(String args[]) throws Exception {
        int ret = ToolRunner.run(new MapReduceClass(), args);
        System.exit(ret);
    }
}</code></pre></noscript></div>
</p>

<p>Let me know if you see any issues with that or you would like to share anything that would be useful.</p>
]]></content>
  </entry>
  
</feed>
